openapi: 3.0.0

info:
  version: 0.0.0
  title: SimpleBlog
  description: Documentation

servers:
  - url: http://localhost:8888/
    description: local server

paths:
  /register:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/StoredUser'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
  /get-token:
    get:
      security:
        - basicAuth: [] # username=phone number
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "footokenjwtTokenAwesome"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
  /posts:
    get:
      parameters:
        - in: query
          name: id
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoredPosts'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoredPost'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostWithID'
      security:
        - bearerAuth: []
      responses:
        201:
          description: Success
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      parameters:
        - in: query
          name: id
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        201:
          description: Success
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    bearerAuth:     
      type: http
      scheme: bearer
      bearerFormat: JWT
    basicAuth:
      type: http
      scheme: basic
  responses:
    BadRequest:
      description: The client has sent a malformed request
      content:
        application/json:
          schema:
            type: string
          example: "malformed json body"
    Unauthorized:
      description: The client doesn't have any or has sent wrong authorization
      content:
        application/json:
          schema:
            type: string
          example: "unauthorize"
    Forbidden:
      description: The client doesn't have permission to access the resource
      content:
        application/json:
          schema:
            type: string
          example: "forbidden"
    InternalServerError:
      description: Error happened in the server side
      content:
        application/json:
          schema:
            type: string
          example: "server timed out"
  schemas:
    StoredUser:
      allOf:
      - $ref: '#/components/schemas/User'
      - type: object
        properties: 
          password: 
            type: string
            example: 1a2b
          timestamp:
            type: string
            format: date-time
    User:
      type: object
      properties: 
        username: 
          type: string
          example: mamat
        role:
          type: string
          example: admin/user
    StoredPost:
      allOf:
      - $ref: '#/components/schemas/PostWithID'
      - type: object
        properties:
          timestamp:
            type: string
            format: date-time
    PostWithID:
      allOf:
      - type: object
        properties:
          id:
            type: integer
      - $ref: '#/components/schemas/Post'
    Post:
      type: object
      properties:
        title: 
          type: string
        content:
          type: string
    StoredPosts:
      type: array
      items:
        $ref: '#/components/schemas/StoredPost'